Actions
	Check stock/price
		"cost"
		"stock"
		"how much"
		"looking"
		"want"
	Add item to purchase
		"add"
		"buy"
		"purchase"
		"take"
	Clear/abort session
		"goodbye"
		"abort"
	Save session long term
		"later"
	Summarize session so far
		"summarize"
		"overview"
	Place order
		--Handle directly when no more tasks
	
Databases
	Configuration
		-options
			-rowid			// option id
			-key(TEXT)		// option key
			-value(TEXT)		// option value
		-actionphrases
			-rowid			// Phrase id
			-phrase(TEXT)		// phrase text
			-aid			// action id this phrase maps to
		-actions
			-rowid			// action id
			-description		// action description
	Product
		-identifiercategories		// lists ways to identify products
			-rowid			// category id
			-name			// category name
		-product
			-rowid			// product id
			-name			// product name
			-price			// product price
			-qty			// product quantity
		-productidentifiers
			-rowid			// row id
			-pid			// product id to identify
			-icid			// identifier category id
			-value(TEXT)		// value of the identifier

Queries
-Get all action words
"SELECT * FROM actionphrases"
-Get All categories so we can filter.
"
SELECT id, name FROM identifiercategories
"
-Determine if we have filtered enough
"
SELECT COUNT(DISTINCT product.id)
FROM identifiercategories IC, productidentifiers PI
WHERE IC.ROWID = PI.icid AND {IC.name = <p> AND PI.value = <p> AND [OR ... (repeat for different category)]}
"
-Once we have filtered enough, get the lone result.
"
SELECT P.*
FROM identifiercategories IC, productidentifiers PI, product p
WHERE PI.pid = P.ROWID IC.ROWID = PI.icid AND {IC.name = <p> AND PI.value = <p> AND [OR ... (repeat for different category)]}
"

Other code
	Input splitting:
		"This, is, a, cool test.  Do you think so?".split(/[\s,.?!;:]+/)
	Task
		-isGlobal?: Boolean
		-id: Integer
		-item
			-either
				-list of tasks
				-specific thing to do
	UserConversation
		-task list
		-information hash: looks roughly like
			h[:global] = hash
			h[0] = hash
			... and so on ...
		-purchaseList: List of things to purchase
	dotask(taskList L)
		-t = highest priority task
		-if (t.item is a list)
			dotask(t.item)
		-else
			carry out t.item
	identifyproduct(UserSession session)
		-while product not identified
			-choose another identifier class to get information for
		-if no product chosen
			return some error
		-if atleast one product
			offer options

IdentifierCategories
	-called
	-year
	-make
	-model
	-option
Tasks
	-Identify(Check stock/price)
	-AskAddToPurchaseList
	-AbortPurchase
	-ReconnectSession
	-Checkout
	-
