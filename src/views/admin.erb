<%#
Author:			Graeme Douglas
The admin configuration page. Targets HTML5.
%>
<% require './config.rb'
%>

<html lang = "en">
<head>
<title> <%=CompanyName%> | autosistant Administration</title>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js">
</script>
<link rel="stylesheet"
	href="http://code.jquery.com/ui/1.9.1/themes/base/jquery-ui.css" />
<script src="http://code.jquery.com/ui/1.9.1/jquery-ui.js"
	type="text/javascript"></script>
<script>

// Send an ajax message to the server.
function updateConfigurationAjax(changeSetP, jsondata){
	var answer = confirm("Are you sure you want to commit these "+
				"changes?");
	// Only continue if answer is truthy.
	if (answer) {
		// Continue on.
	} else { return true; }
	
	$.ajax({
		type:	'POST',
		url:	'/autosistant/admin/ajax',
		data:	{
				// TODO: Login-info or something?
				changeSet:	changeSetP,
				json:		jsondata
			},
		beforeSend:function(){
			// TODO: Notify user about waiting for reply?
		},
		success:function(data){
			// AJAX request made succesfully!
			// Parse the JSON message.
			var parsed = $.parseJSON(data);
			
			// Check if changes made stayed.
			if (parsed.state == 1) {
				alert("Changes made successfully!");
			} else {
				alert("Errors occured. The return status was: "+
					parsed.state);
			}
		},
		error:function(){
			// AJAX Request failed!
			alert('AJAX Failure: please try again!');
		}
	});
};

// Key codes for reference.
var A_KEY = 65;
var CTRL_KEY = 17;
var BACKSPACE_KEY = 8;

/* Idea: For each action, have a list of original database values, list of
         database values to delete, and list of database values to add.
*/
var actionlist = <%=
toRet = "["
index = 0
Actions.each do |action|
	phrases = ConfigDB.execute("SELECT phrase FROM actionphrases WHERE "+
					"aid=?", index)
	phrases.each do |row|
		toRet << "{ "
		toRet << "aid: #{index}, phrase: \"#{row["phrase"]}\""
		toRet << " }, "
	end
	index+=1
end
# Trim useless characters off.
2.times{toRet.chop!}
toRet << "]"
toRet
%>;

$(function() {
/* TODO:
 * ** Maybe move all this JS to a seperate file, if possible?
*/
	/// Try and prevent non-letters from being entered in certain textboxes
	var validateLettersOnly = function(selector) {
		var $elem = $(selector);
		var replace = $elem.val().replace(/[^a-zA-Z]/, "");
		return $elem.val(replace);
	}

	$(".lettersonly").keydown(function(e) {
		if ((e.which < 65 || e.which > 90) && e.which != BACKSPACE_KEY)
			e.preventDefault();
		return true;
	});

	$(".lettersonly").keyup(function(e) {
		if(
			(e.ctrlKey && e.which === A_KEY)	
				|| 
			(e.which === CTRL_KEY)
				||
			(e.which === BACKSPACE_KEY)
		)
			return true;

		validateLettersOnly(this);	
		return true;
	});

	$(".lettersonly").bind("paste", function() {
		var selector = this;
        	setTimeout(function() {
			validateLettersOnly(selector);	
		}, 20);
	});
	///

	// Create UI Tabs.
	$( "#tabs" ).tabs().addClass( "ui-tabs-vertical ui-helper-clearfix" );
	$( "#tabs li" ).removeClass( "ui-corner-top" )
		.addClass( "ui-corner-left" );
	
	// Create accordions. 
	$( ".accordion" ).accordion();
	
	// Add item to a specific list.
	var count = 1;
	$(document).on('click', '.addphrase', function() {
		// Get objects we need.
		var $form = $(this).closest("form");
		var $div = $(this).closest("div.autosized");
		var aid = $form.children("input:hidden.hid").eq(0).val();
		var $list = $form.children("ul").eq(0);
		var $textbox = $form.children("input:text").eq(0);
		var text = $textbox.val();
 		$textbox.attr('value', '');
		
		// Search to see if the new item already exists.
		var found = false;
		for (i = 0; i < actionlist.length; i++) {
			if (actionlist[i].phrase == text) {
				found = true;
				break;
			}
		}
		
		// If this is a new, unique item, add it to the list.
		if (text != '' && !found) {
			$list.append('<li>'+text+
				'<a href="#" class="liLinkDelete">x</a></li>');
			var newitem = {
				aid:	aid,
				phrase:	text
			};
			actionlist.push(newitem);
			
			// Change div size.
			$div.fadeIn("slow", function() {
				$div.height('auto');
			});
		} else if (text == '') {
		} else if (found) {
			alert('Cannot have two of the same phrase!');
		}
	});
	
	// Remove item off of a specific list. 
	$(document).on('click', '.liLinkDelete', function() {
		// Get some necessary objects.
		var $form = $(this).closest("form");
		var $div = $(this).closest("div.autosized");
		var text = $(this).closest("li").html();
		// The following is a total hack... a terribe idea.
		text = text.substring(0, text.indexOf('<'));
		
		$(this).closest('li').remove();
		
		// Change div size.
		$div.fadeIn("slow", function() {
			$div.height('auto');
		});
		
		// Delete any occurence in actionlist.
		for (i = 0; i < actionlist.length; i++) {
			if (actionlist[i].phrase == text) {
				actionlist.splice(i, 1);
			}
		}
	});
	
	// Send AJAX message on click for phrase updating.
	$("#commitPhrases").click(function() {
		updateConfigurationAjax("phrases", actionlist);
	});
});
</script>
<style>
.ui-tabs-vertical { width: 55em; }
.ui-tabs-vertical .ui-tabs-nav { padding: .2em .1em .2em .2em; float: left; width: 12em; }
.ui-tabs-vertical .ui-tabs-nav li { clear: left; width: 100%; border-bottom-width: 1px !important; border-right-width: 0 !important; margin: 0 -1px .2em 0; }
.ui-tabs-vertical .ui-tabs-nav li a { display:block; }
.ui-tabs-vertical .ui-tabs-nav li.ui-tabs-active { padding-bottom: 0; padding-right: .1em; border-right-width: 1px; border-right-width: 1px; }
.ui-tabs-vertical .ui-tabs-panel { padding: 1em; float: right; width: 40em;}
li { zoom:1 }
</style>
</head>
<body>
<h1> <%=CompanyName%> | autosistant Configuration Page </h1>
<div id="tabs">
<ul>
<li><a href="#tabs-phrases">Phrases</a></li>
<li><a href="#tabs-identcats">Identifier Categories</a></li>
<li><a href="#tabs-products">Product Search</a></li>
<li><a href="#tabs-ordering">Order Process</a></li>
</ul>

<div id="tabs-phrases">
<h3>Phrase Configuration</h3>
<div class="accordion">
<%=
toRet = ""
index = 0
Actions.each do |action|
	# If we cannot configure the action, don't display it
	if !action[:configurable] then index+=1; next end
	toRet << "<h4>" + action[:description] + "</h4>\n"
	toRet << '<div class="autosized">'+"\n"
	toRet << '<form class="ulmanager" id="ulm-f'+index.to_s+
		'" action="">'+"\n"
	toRet << '<input type="text" class="lettersonly" id="ulm-tb'+
			index.to_s+'"/>'+"\n"
	toRet << '<button type="button" class="addphrase" id="ulm-b'+index.to_s+
			'">Add Phrase</button>'+"\n"
	toRet << '<br/>'+"\n"
	toRet << '<input type="hidden" class="hid" value="'+
			index.to_s+'">'+"\n"
	toRet << '<ul class="dynlist" id="ulm-ul'+index.to_s+'">'+"\n" 
	# Add current phrases from DB.
	phrases = ConfigDB.execute("SELECT phrase FROM actionphrases WHERE "+
					"aid=?", index)
	phrases.each do |row|
		toRet << '<li>'+row["phrase"]+
			'<a href="#" class="liLinkDelete">x</a></li>'+"\n"
	end
	toRet << '</ul>'+"\n"
	toRet << '</form>'+"\n"
	toRet << "</div>\n"
	index+=1
end
toRet
%>
</div>
<button type="button" id="commitPhrases">Commit Changes to Phrases</button>
</div>
<div id="tabs-identcats">
<h3>Identifier Category Configuration</h3>
</div>
<div id="tabs-products">
<h3>Product Search Configuration</h3>
</div>
<div id="tabs-ordering">
<h3>Order Process Configuration</h3>
</div>
</div>
</body>
